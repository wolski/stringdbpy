---
title: Visualize Gene Set Enrichment Analysis Results
# current date automatically added
date: today
format:
  html:
    code-fold: false
    toc: true
    toc-depth: 3
    toc-title: "Contents"
jupyter: python3
params:
  data_file: null    # or "~"
  links_file: null
  FDR_threshold: 0.05
  genes_mapped_threshold: 10
execute:
  echo: true
---


```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str = None
links_file: str = None
FDR_threshold: float = None

```

```{python}
#| vscode: {languageId: python}
#| include: false
# Standard library imports
from pathlib import Path

# Third-party imports
import polars as pl
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import Markdown, display, HTML
import re
    
# Local imports
from string_gsea.network import (
    explode_protein_columns,
    summarize_terms,
    add_gene_ratio,
    filter_by_FDR
)
from string_gsea.cluster_genesets import (
    make_nested_dict,
    convert_to_binary,
    plot_term_distance_heatmap
)
from string_gsea.gsea_plotting import make_upset, plot_term_ridges
from string_gsea import TermNetworkPlotter

def pandoc_anchor(text):
    anchor = text.strip().lower()
    anchor = re.sub(r'[^\w\s-]', '', anchor)
    anchor = anchor.replace(' ', '-').replace('_', '-')
    return anchor

```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file_data = "/Users/witoldwolski/__checkout/stringdbpy/tests/marshli/2881871.res/WU_1234_GSEA/pep_2_no_imputed/WU1234_string_gsea_results_long.xlsx"
    file_links = "/Users/witoldwolski/__checkout/stringdbpy/tests/marshli/2881871.res/WU_1234_GSEA/pep_2_no_imputed/links.txt"
else:
    file_data = Path(data_file)
    file_links = Path(links_file)
    FDR_threshold = FDR_threshold
    genes_mapped_threshold = genes_mapped_threshold


# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file_data)
# Select and explode protein columns
# read the links.txt into a dict
with open(file_links, "r") as f:
    link_map = {
        line.split(": ", 1)[0]: line.split(": ", 1)[1].strip()
        for line in f.read().splitlines() if line.strip()
    }

```



```{python}
#| vscode: {languageId: python}
#| include: false
#| echo: false
df = filter_by_FDR(df, FDR_threshold, genes_mapped_threshold)
df = add_gene_ratio(df)
xd = explode_protein_columns(df)
xd = summarize_terms(xd)
nested = make_nested_dict(xd)

```



```{python}
#| vscode: {languageId: python}
#| include: false

#pdf = xd.select(['contrast','proteinRanks','proteinInputValues']).to_pandas()

g = sns.FacetGrid(xd, col='contrast', col_wrap=4, sharex=False, sharey=False)
g.map_dataframe(sns.scatterplot, x='proteinRanks', y='proteinInputValues')
g.set_axis_labels('proteinRanks', 'proteinInputValues')
for ax in g.axes.flatten():
    ax.tick_params(labelrotation=45)

plt.tight_layout()
plt.show()
```



```{python}
#| include: false
#| eval: false
if False:
    
    cont = "Bait_NCP_pUbT12T14_results.tsv"
    cat = "SMART"
    fc = nested[cont][cat]

    g = plot_term_distance_heatmap(fc)
    plt.setp(g.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
    plt.show()
            
```



## Table of Contents

```{python}
#| vscode: {languageId: python}
#| echo: false
contrast_list =  sorted(xd.get_column("contrast").unique().to_list())

toc_html = "<ul>"
for cont in contrast_list:
    anchor = pandoc_anchor(cont)
    toc_html += f'<li><a href="#{anchor}">{cont}</a></li>'
toc_html += "</ul>"

display(HTML(toc_html))

```

```{python}
#| vscode: {languageId: python}
#| echo: false
# print the categories
categories =  sorted(xd.get_column("category").unique().to_list())
category_str = ", ".join(str(c) for c in categories)
display(Markdown(f"**Categories:** {category_str}"))
```


For each of the contrasts and each of the gene set categories we show four plots:

1. Network plot
2. Heatmap plot
3. Upset plot
4. Ridgeline plot




```{python}
#| vscode: {languageId: python}
#| echo: false
#| output: asis
#| include: true
#| warning: false


contrast_list = sorted(xd.get_column("contrast").unique().to_list())
category_list = sorted(xd.get_column("category").unique().to_list())

for cont in contrast_list:
    # make this a tab‚Äêset
    anchor = pandoc_anchor(cont)
    display(HTML(f'<h2 id="{anchor}">Contrast: {cont}</h2>\n'))

    # show the enrichment URL for this contrast, if present
    url = link_map.get(cont.removesuffix("_results.tsv"))
    if url:
        display(Markdown(f"[üîó Global enrichment for {cont}]({url})\n"))
    
    display(Markdown(f"::: {{.panel-tabset}}\n"))
    for cat in category_list:
        # each of these becomes a tab
        display(Markdown(f"## Cat.: {cat}\n"))

        xdf = xd.filter(
            (pl.col("contrast") == cont) & (pl.col("category") == cat)
        )
        if xdf.is_empty():
            display(Markdown("_No data for this category_"))
        else:
            TermNetworkPlotter.plot_network(xd, category=cat, contrast=cont, thresh=1)
            display(Markdown("\n"))
            display(Markdown(TermNetworkPlotter.TermNetworkPlotter.get_figure_legend(category=cat, thresh=1)))
            display(Markdown("\n"))
            one_nested = nested[cont][cat]
            g = plot_term_distance_heatmap(one_nested)
            plt.setp(g.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
            plt.show()
            display(Markdown("""\nHeatmap showing term and protein distances, using Jaccard index.
            Each row represents a protein, and each column represents a term.
            The color of the cell represents the protein input value (log2FC, t-statistic, etc.).\n"""))
            binary = convert_to_binary(one_nested, to_boolean=True)
            upset = make_upset(binary, xdf)
            axes = upset.plot()
            plt.show()
            display(Markdown(f"\n\n"))
            display(Markdown("""Upset plot showing the overlap of terms and proteins.
            On the left you see the term size (number of proteins matching the term).
            On the top you see the number of proteins unique to a term, or a combination of terms."""))
            display(Markdown(f"\n\n"))
            g = plot_term_ridges(xdf)
            plt.show(g.figure)
            display(Markdown("""\nRidgeline plot showing the distribution of protein input values (log2FC, t-statistic, etc.) for each term.
            The border color of the ridges corresponds to the direction of enrichment,
            and the height of the bar at the right of each ridge corresponds to the -log10(FDR) (higher is better).
            The color of the density plot is proportional to the gene ratio (number of proteins matching the term divided by the total number of proteins in the term).\n"""))
    display(Markdown(f":::\n"))
```

```{python}
#| vscode: {languageId: python}
#| include: false
print("hellos")

```