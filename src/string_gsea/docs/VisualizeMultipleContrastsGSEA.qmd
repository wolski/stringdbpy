---
title: Comparing GSEA results for multiple contrasts
date: today
format:
  html:
    code-fold: false
    toc: true
    toc-depth: 3
    toc-title: "Contents"
jupyter: python3
params:
  data_file: null    # or "~"
  links_file: null
execute:
  echo: true
---



```{python}
#| include: false
#| tags: [parameters]

# declare the parameter (default None)
data_file: str  = None
links_file: str  = None
```

```{python}
#| vscode: {languageId: python}
#| include: false
# Standard library imports
from pathlib import Path
import warnings

# Third-party imports
import polars as pl
import matplotlib.pyplot as plt
from IPython.display import Markdown, display

# Local imports
from string_gsea.network import (
    summarize_terms,
    separate_pivot_longer,
    add_gene_ratio
)
from string_gsea.gsea_plotting import make_upset_contrasts_terms
from string_gsea.dotplot_endrichment import dotplot_enrichment
from string_gsea import TermNetworkPlotter

# Suppress warnings
warnings.filterwarnings(
    "ignore",
    message="A value is trying to be set on a copy of a DataFrame or Series through chained assignment",
    category=FutureWarning,
)
```

```{python}
#| vscode: {languageId: python}
#| include: false
wd = %pwd
print(Path(wd))
```


```{python}
#| vscode: {languageId: python}
#| include: false
# Define input directory and file

if data_file is None:
    # fallback, or raise, or skip
    file_data  = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"WUabcd_string_gsea_results_long.xlsx"
    file_links = Path(wd).parent/"tests/data/dummy_out/WU_abcd_GSEA/from_rnk"/"links.txt"
else:
    file_data = Path(data_file)
    file_links = Path(links_file)

print("Using file:", file_data, "\n")
print("Using links file:", file_links, "\n")

# Read Excel and convert to Polars
# Read Excel file directly with polars
df = pl.read_excel(file_data)
# Select and explode protein columns
```


# Comparing GSEA results for multiple contrasts

The imported file is:

```{python}
#| echo: false
#| output: asis

print(str(file_data) + "\n")
print(str(file_links) + "\n")
```


# Gene Set Categories

```{python}
#| vscode: {languageId: python}
#| include: false
df = add_gene_ratio(df)
xd = separate_pivot_longer(df)
xd = summarize_terms(xd)

# Sort the category list alphabetically
category_list = sorted(xd.get_column("category").unique().to_list())
```


```{python}
#| vscode: {languageId: python}
#| echo: false
#| output: asis
#| include: true
#| warning: false


display(Markdown(f"::: {{.panel-tabset}}\n"))
for cat in category_list:
    # each of these becomes a tab
    display(Markdown(f"## Cat.: {cat}\n"))

    xdf = xd.filter((pl.col("category") == cat))
    if xdf.is_empty():
        display(Markdown("_No data for this category_"))
    else:
        display(Markdown("### Upset plot"))
        make_upset_contrasts_terms(xd, category=cat)
        display(Markdown("\n"))
        display(Markdown("""Upset plot showing the overlap of terms and contrasts.
            On the left you see the contrast size (number of terms matching the contrast).
            On the top you see the number of terms unique to a contrast, or a combination of contrast."""))
        display(Markdown("\n### Dotplot"))
        
        xd_smart = xd.drop([col for col in xd.columns if col.startswith("protein")]).unique()
        xd_smart = xd_smart.filter(pl.col("category") == cat)
        dotplot_enrichment(xd_smart)
        display(Markdown("\n"))
        
        display(Markdown("""Dotplot of enriched categories for all contrasts. The size of the dot represents the gene ratio (number of proteins matching the term divided by the total number of proteins in the term), the color represents the -log10(FDR) (higher is better), the border color represents the direction of enrichment (blue - bottom, yellow - top, green - both ends)."""))
        display(Markdown("\n"))

        display(Markdown("### Network plot"))
        TermNetworkPlotter.plot_network(xd, category=cat, thresh=1)
        display(Markdown(f"""Network plot for {cat} category\n:"""))
        display(Markdown(TermNetworkPlotter.TermNetworkPlotter.get_figure_legend(one_contrast = False, category=cat, thresh=1)))
        display(Markdown("\n"))

        
display(Markdown(f":::\n"))
```


```{python}
#| vscode: {languageId: python}
#| include: false



```
